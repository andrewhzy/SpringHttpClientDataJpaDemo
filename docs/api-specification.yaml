openapi: 3.0.3
info:
  title: Internal Task Management API
  description: |
    Internal Task Management API for organizational use with Excel file processing.
    
    This API allows users to upload Excel files containing chat evaluation data.
    Files are immediately parsed during upload and stored as structured row data.
    
    **Core Features:**
    - Upload Excel files with chat evaluation data (questions, golden answers, citations)
    - Immediate parsing and structured data storage (no blob storage)
    - Task lifecycle management (create, query, cancel, delete)
    - Background processing with progress tracking
    - Structured data responses for easy frontend integration
    
    **Chat Evaluation Requirements:**
    - Excel columns "question", "golden_answer", "golden_citations"
    
    **Authentication:**
    - JWT-based authentication from internal SSO
    - User-scoped access to tasks and operations
  version: 1.0.0
  contact:
    name: Internal API Team
    email: api-team@organization.com
  license:
    name: Internal Use Only
    url: https://internal.organization.com/licenses

servers:
  - url: https://internal-api.organization.com/rest/api/v1
    description: Internal Production API Server
  - url: https://staging-api.organization.com/rest/api/v1
    description: Internal Staging API Server

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token from internal authentication service.
        Token should contain user_id, roles, and permissions.

  schemas:
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
            - timestamp
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "Invalid Excel file format"
            details:
              type: string
              example: "File must be .xlsx or .xls format"
            timestamp:
              type: string
              format: date-time
              example: "2024-01-01T00:00:00Z"
            request_id:
              type: string
              example: "request_12345"
              description: "Request ID for debugging"
            user_id:
              type: string
              example: "user_123"

    PaginationMeta:
      type: object
      properties:
        per_page:
          type: integer
          example: 20
        total:
          type: integer
          example: 100
        next_cursor:
          type: string
          nullable: true
          example: "123"
          description: "Cursor for next page, null if no more results"
        has_more:
          type: boolean
          example: true
          description: "Whether there are more results available"

    UserContext:
      type: object
      properties:
        user_id:
          type: string
          example: "user_123"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@organization.com"
        roles:
          type: array
          items:
            type: string
          example: ["user"]
        departments:
          type: array
          items:
            type: string
          example: ["engineering"]

    TaskStatus:
      type: string
      enum: [queueing, processing, completed, cancelled, failed]
      description: |
        Task status values:
        - queueing: Task created with parsed data, waiting for background processing
        - processing: Background processing is executing on the parsed rows
        - completed: All rows processed successfully
        - cancelled: Task cancelled by user
        - failed: Background processing failed with error

    TaskType:
      type: string
      enum: [chat-evaluation]
      description: |
        Task type values:
        - chat-evaluation: Chat evaluation task with questions and expected answers

    Task: 
      type: object
      required:
        - id
        - user_id
        - original_filename
        - sheet_name
        - task_type
        - task_status
        - upload_batch_id
        - row_count
        - processed_rows
        - created_at
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        user_id:
          type: string
          example: "user_123"
        original_filename:
          type: string
          example: "monthly_reports.xlsx"
        sheet_name:
          type: string
          example: "January_Data"
        task_type:
          $ref: '#/components/schemas/TaskType'
        task_status:
          $ref: '#/components/schemas/TaskStatus'
        upload_batch_id:
          type: string
          format: uuid
          example: "456e7890-e89b-12d3-a456-426614174000"
          description: "Groups tasks from the same Excel file upload"
        row_count:
          type: integer
          minimum: 0
          example: 150
          description: "Total number of rows parsed from Excel sheet"
        processed_rows:
          type: integer
          minimum: 0
          example: 75
          description: "Number of rows completed by background processing"
        progress_percentage:
          type: integer
          minimum: 0
          maximum: 100
          example: 50
          description: "Calculated as (processed_rows / row_count * 100)"
        error_message:
          type: string
          nullable: true
          example: "API timeout on row 15"
        metadata:
          type: object
          nullable: true
          example: {"detected_columns": ["question", "golden_answer"], "extra_columns": ["priority"]}
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T00:05:00Z"
        started_at:
          type: string
          format: date-time
          nullable: true
          example: "2024-01-01T00:01:00Z"
        completed_at:
          type: string
          format: date-time
          nullable: true
          example: "2024-01-01T00:10:00Z"
        cancelled_at:
          type: string
          format: date-time
          nullable: true

    ChatEvaluationInputData:
      type: object
      required:
        - row_number
        - question
        - golden_answer
        - golden_citations
      properties:
        row_number:
          type: integer
          example: 1
        question:
          type: string
          example: "What is artificial intelligence?"
        golden_answer:
          type: string
          example: "AI is a branch of computer science..."
        golden_citations:
          type: array
          items:
            type: string
          example: ["https://example.com/ai-definition", "https://example.com/ai-overview"]
        metadata:
          type: object
          nullable: true
          example: {"priority": "high", "category": "general"}

    ChatEvaluationOutputData:
      type: object
      required:
        - row_number
        - api_answer
        - api_citations
        - answer_similarity
        - citation_similarity
      properties:
        row_number:
          type: integer
          example: 1
        api_answer:
          type: string
          example: "Artificial intelligence (AI) refers to..."
        api_citations:
          type: array
          items:
            type: string
          example: ["https://api-source.com/ai-definition"]
        answer_similarity:
          type: number
          format: float
          minimum: 0
          maximum: 1
          example: 0.8567
        citation_similarity:
          type: number
          format: float
          minimum: 0
          maximum: 1
          example: 0.7234
        processing_time_ms:
          type: integer
          nullable: true
          example: 1250

    TaskList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    UploadResponse:
      type: object
      required:
        - upload_batch_id
        - tasks
      properties:
        upload_batch_id:
          type: string
          format: uuid
          example: "456e7890-e89b-12d3-a456-426614174000"
        tasks:
          type: array
          items:
            type: object
            properties:
              task_id:
                type: string
                format: uuid
              sheet_name:
                type: string
              task_type:
                $ref: '#/components/schemas/TaskType'
              status:
                $ref: '#/components/schemas/TaskStatus'
              row_count:
                type: integer
                description: "Number of rows parsed from this sheet"
        total_sheets:
          type: integer
          example: 3
        message:
          type: string
          example: "Successfully created 3 tasks from uploaded Excel file"

    TaskStats:
      type: object
      properties:
        total_tasks:
          type: integer
          example: 25
        pending_tasks:
          type: integer
          example: 5
        processing_tasks:
          type: integer
          example: 3
        completed_tasks:
          type: integer
          example: 15
        cancelled_tasks:
          type: integer
          example: 1
        failed_tasks:
          type: integer
          example: 1
        total_upload_batches:
          type: integer
          example: 8
        chat_evaluation_tasks:
          type: integer
          example: 25

    TaskWithData:
      allOf:
        - $ref: '#/components/schemas/Task'
        - type: object
          properties:
            input_data:
              type: array
              items:
                $ref: '#/components/schemas/ChatEvaluationInputData'
              description: "Input data for chat evaluation tasks"
            results_data:
              type: array
              items:
                $ref: '#/components/schemas/ChatEvaluationOutputData'
              nullable: true
              description: "Results data (null if processing not completed)"
            results_excel_file:
              type: object
              nullable: true
              description: "Excel file containing all evaluation results (null if processing not completed)"
              properties:
                filename:
                  type: string
                  example: "task_123_evaluation_results.xlsx"
                  description: "Generated Excel filename"
                content:
                  type: string
                  format: byte
                  description: "Base64-encoded Excel file content"
                size:
                  type: integer
                  example: 15360
                  description: "File size in bytes"
                mime_type:
                  type: string
                  example: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                generated_at:
                  type: string
                  format: date-time
                  example: "2024-01-01T00:10:00Z"
                  description: "When the Excel file was generated"

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            invalid_file:
              summary: Invalid Excel file
              value:
                error:
                  code: "INVALID_FILE_FORMAT"
                  message: "File must be Excel format (.xlsx or .xls)"
                  details: "Uploaded file has MIME type text/plain"
                  timestamp: "2024-01-01T00:00:00Z"
                  request_id: "request_12345"
                  user_id: "user_123"
            missing_columns:
              summary: Missing required columns
              value:
                error:
                  code: "MISSING_REQUIRED_COLUMNS"
                  message: "Excel file missing required columns for chat evaluation"
                  details: "Excel must contain columns: question, golden_answer, golden_citations"
                  timestamp: "2024-01-01T00:00:00Z"
                  request_id: "request_12345"
                  user_id: "user_123"
    
    Unauthorized:
      description: Unauthorized - Invalid or missing JWT token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "UNAUTHORIZED"
              message: "Invalid or expired JWT token"
              details: "Please refresh your authentication token"
              timestamp: "2024-01-01T00:00:00Z"
              request_id: "request_12345"
    
    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "FORBIDDEN"
              message: "Access denied to task"
              details: "You can only access your own tasks"
              timestamp: "2024-01-01T00:00:00Z"
              request_id: "request_12345"
              user_id: "user_123"
    
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    PayloadTooLarge:
      description: Payload Too Large
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "FILE_TOO_LARGE"
              message: "File size exceeds maximum limit"
              details: "Maximum file size is 50MB"
              timestamp: "2024-01-01T00:00:00Z"
              request_id: "request_12345"
              user_id: "user_123"
    
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

security:
  - JWTAuth: []

paths:
  /tasks:
    post:
      tags:
        - Tasks
      summary: Upload Excel file and create chat evaluation tasks
      description: |
        Upload an Excel file with chat evaluation data. Each sheet will be analyzed 
        and parsed immediately into structured data.
        
        **Chat Evaluation Requirements:**
        - **Required columns**: "question", "golden_answer", "golden_citations"
        
        **File Requirements:**
        - Format: .xlsx or .xls
        - Maximum size: 50MB
        - Maximum sheets: 20 per file
        - Maximum rows per sheet: 1,000
        
        **Processing:**
        - Files are parsed immediately during upload
        - Row data is stored in structured tables (no blob storage)
        - Tasks are created with references to the parsed data
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - task_type
              properties:
                file:
                  type: string
                  format: binary
                  description: Excel file (.xlsx or .xls)
                task_type:
                  $ref: '#/components/schemas/TaskType'
                  description: Task type for the uploaded data
                description:
                  type: string
                  description: Optional description for the upload batch
                  example: "Monthly evaluation data upload"
      responses:
        '201':
          description: Excel file processed and tasks created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
        '400':
          description: Bad Request - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missing_task_type:
                  summary: Missing task_type field
                  value:
                    error:
                      code: "MISSING_REQUIRED_FIELD"
                      message: "task_type is required"
                      details: "task_type field must be provided in the request body"
                      timestamp: "2024-01-15T14:30:00Z"
                      request_id: "request_12345"
                      user_id: "user_123"
                invalid_task_type:
                  summary: Invalid task_type value
                  value:
                    error:
                      code: "INVALID_TASK_TYPE"
                      message: "Invalid task_type value"
                      details: "task_type must be 'chat-evaluation'. Received: 'unknown-type'"
                      timestamp: "2024-01-15T14:30:00Z"
                      request_id: "request_12345"
                      user_id: "user_123"
                invalid_file_format:
                  summary: Invalid Excel file format
                  value:
                    error:
                      code: "INVALID_FILE_FORMAT"
                      message: "File must be Excel format (.xlsx or .xls)"
                      details: "Uploaded file has MIME type text/plain, expected Excel format"
                      timestamp: "2024-01-15T14:30:00Z"
                      request_id: "request_12345"
                      user_id: "user_123"
                missing_required_columns:
                  summary: Missing required Excel columns
                  value:
                    error:
                      code: "MISSING_REQUIRED_COLUMNS"
                      message: "Excel file missing required columns for chat evaluation"
                      details: "Excel must contain columns: question, golden_answer, golden_citations. Found: question, answer"
                      timestamp: "2024-01-15T14:30:00Z"
                      request_id: "request_12345"
                      user_id: "user_123"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          $ref: '#/components/responses/PayloadTooLarge'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - Tasks
      summary: List user tasks
      description: |
        Get a list of tasks for the authenticated user using cursor-based pagination.
        
        **Cursor-based Pagination:**
        - First request: Do not include cursor parameter
        - Subsequent requests: Use next_cursor from previous response
        - Better performance than page-based pagination
        
        **Note:** This endpoint returns task metadata only (no input/results data).
        Use the individual task endpoint to get structured row data.
      operationId: listTasks
      parameters:
        - name: per_page
          in: query
          description: Number of items per page
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: task_type
          in: query
          description: Task type filter
          required: true
          schema:
            $ref: '#/components/schemas/TaskType'
        - name: cursor
          in: query
          description: Cursor for pagination (omit for first page)
          required: false
          schema:
            type: string
            example: "123"
      responses:
        '200':
          description: List of user's tasks (metadata only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tasks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Task ID
        schema:
          type: string
          format: uuid

    get:
      tags:
        - Tasks
      summary: Get task details with structured data and Excel file
      description: |
        Retrieve detailed information about a specific task including parsed input data,
        processing results, and generated Excel file (if completed). Users can only access their own tasks.
        
        **Response includes:**
        - Task metadata (status, progress, etc.)
        - Structured input data (parsed from original Excel)
        - Processing results (if background processing completed)
        - Excel file with evaluation results (if background processing completed)
        
        **Data structure for chat evaluation:**
        - Questions, golden answers, golden citations, similarity scores
        - Excel file contains all input data plus API responses and similarity scores
      responses:
        '200':
          description: Task details with structured input and results data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskWithData'
              examples:
                chat_evaluation_task:
                  summary: Chat Evaluation Task Example
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    task_type: "chat-evaluation"
                    status: "completed"
                    row_count: 2
                    processed_rows: 2
                    input_data:
                      - row_number: 1
                        question: "What is AI?"
                        golden_answer: "AI is artificial intelligence..."
                        golden_citations: ["https://example.com/ai"]
                      - row_number: 2
                        question: "What is ML?"
                        golden_answer: "ML is machine learning..."
                        golden_citations: ["https://example.com/ml"]
                    results_data:
                      - row_number: 1
                        api_answer: "Artificial intelligence refers to..."
                        api_citations: ["https://api-source.com/ai"]
                        answer_similarity: 0.85
                        citation_similarity: 0.72
                      - row_number: 2
                        api_answer: "Machine learning is a subset..."
                        api_citations: ["https://api-source.com/ml"]
                        answer_similarity: 0.92
                        citation_similarity: 0.88
                    results_excel_file:
                      filename: "task_123e4567_evaluation_results.xlsx"
                      content: "UEsDBBQAAAAIAO..."
                      size: 15360
                      mime_type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                      generated_at: "2024-01-01T00:10:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Tasks
      summary: Update/cancel task
      description: |
        Update a task, primarily used for cancelling tasks. Only tasks in 'queueing' or 'processing'
        status can be cancelled. Only task owners can update their tasks.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cancelled
              properties:
                cancelled:
                  type: boolean
                  description: Set to true to cancel the task
                  example: true
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Cannot update task in current status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  code: "INVALID_STATUS"
                  message: "Cannot cancel completed task"
                  details: "Task has already finished processing"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Tasks
      summary: Delete task
      description: |
        Delete a task permanently. This will remove the task record and 
        associated structured data from input and output tables. 
        Only task owners can delete their tasks.
        Tasks in 'processing' status cannot be deleted.
      responses:
        '204':
          description: Task deleted successfully
        '400':
          description: Cannot delete task in current status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  code: "INVALID_STATUS"
                  message: "Cannot delete task in processing status"
                  details: "Cancel the task first, then delete it"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError' 